# Login and set subscription for deployment
az login
subscriptionId=`az account list --query "[?name=='Jeff Dahan - MS Internal'].id | [0]"`
subscriptionId=`eval echo $subscriptionId`
echo $subscriptionId
az account set --subscription ${subscriptionId}

# Set variables; this works better if you pre-create vnet
location="westeurope"
resourceGroupName="dns-testing"
vnetAzureName="azurevnet"
vnetAzureAddressPrefix="172.16.0.0/16"
subnetAzureName="subnet1"
subnetAzureAddressPrefix="172.16.0.0/24"

subnetAzureDNSInboundName="azurednsinboud"
subnetAzureDNSInboundPrefix="172.16.1.0/25"
subnetAzureDNSOutboundName="azurednsoutbound"
subnetAzureDNSOutboundPrefix="172.16.1.128/25"


vnetOnPremName="onpremvnet"
vnetOnPremAddressPrefix="10.0.0.0/16"
subnetOnPremName="subnet1"
subnetOnPremAddressPrefix="10.0.0.0/24"
vnetPeerOnPremtoAzureName="PeerOnPremtoAzure"
vnetPeerAzuretoOnPremName="PeerAzuretoOnPrem"

subnetBastionName="AzureBastionSubnet"
subnetBastionPrefix="10.0.1.0/24"
bastionIPName="pipBastion1"
bastionName="bastion1"

# create resource group
az group create -l $location -n $resourceGroupName

# create Azure vnet
az network vnet create --name $vnetAzureName --resource-group $resourceGroupName --subnet-name $subnetAzureName --address-prefixes $vnetAzureAddressPrefix --subnet-prefixes $subnetAzureAddressPrefix
vnetAzureSubnetId=`az network vnet subnet show --resource-group $resourceGroupName --name $subnetAzureName --vnet-name $vnetAzureName --query "id"`
vnetAzureSubnetId=`eval echo $vnetAzureSubnetId`
echo $vnetAzureSubnetId

az network vnet subnet create --name $subnetAzureDNSInboundName --resource-group $resourceGroupName --vnet-name $vnetAzureName --address-prefixes $subnetAzureDNSInboundPrefix
az network vnet subnet create --name $subnetAzureDNSOutboundName --resource-group $resourceGroupName --vnet-name $vnetAzureName --address-prefixes $subnetAzureDNSOutboundPrefix

# create OnPrem vnet
az network vnet create --name $vnetOnPremName --resource-group $resourceGroupName --subnet-name $subnetOnPremName --address-prefixes $vnetOnPremAddressPrefix --subnet-prefixes $subnetOnPremAddressPrefix
vnetOnPremSubnetId=`az network vnet subnet show --resource-group $resourceGroupName --name $subnetOnPremName --vnet-name $vnetOnPremName --query "id"`
vnetOnPremSubnetId=`eval echo $vnetOnPremSubnetId`
echo $vnetOnPremSubnetId

az network vnet subnet create --name $subnetBastionName --resource-group $resourceGroupName --vnet-name $vnetOnPremName --address-prefixes $subnetBastionPrefix

# Peer vnets
az network vnet peering create --name $vnetPeerOnPremtoAzureName --resource-group $resourceGroupName --vnet-name $vnetAzureName --remote-vnet $vnetOnPremName --allow-vnet-access
az network vnet peering create --name $vnetPeerAzuretoOnPremName --resource-group $resourceGroupName --vnet-name $vnetOnPremName --remote-vnet $vnetAzureName --allow-vnet-access

# create bastion
az network public-ip create -g $resourceGroupName -n $bastionIPName --sku Standard --zone 1 
az network bastion create --location $location --name $bastionName --public-ip-address $bastionIPName --resource-group $resourceGroupName --vnet-name $vnetOnPremName


# Powershell commands due to Azure Private DNS Resolver being in preview (Open PowerShell Terminal)
Install-Module Az.DnsResolver              ## Run as administrator in Powershell via Terminal
Get-InstalledModule -Name Az.DnsResolver   ## Run as administrator in Powershell via Terminal

## Open Powershell Terminal as usual in VS Code
# Variables
$subscriptionName="" # Insert your Subscription Name here
$location="westeurope"
$resourceGroupName="dns-testing"
$vnetAzureName="azurevnet"
$subnetAzureDNSInboundName="azurednsinboud"
$subnetAzureDNSOutboundName="azurednsoutbound"
$endpointInboundName="azurednsinboudendpoint"
$endpointOutboundName="azurednsoutboudendpoint"
$dnsResolverName="azureDNSResolver"
$endpointInboundIP="172.16.1.4"
$dnsOutboundRulesetName="outboundRuleSet1"
$dnsOutboundVnetLinkName1="dnsOutboundVnetLink1"
$dnsOutboundForwardingRule1="dnsOutboundForwardingRule1"
$AdDomainName="dnstest.local."

# Connect to Azure and Set subscription
Connect-AzAccount -Environment AzureCloud
$subscriptionObject = Get-AzSubscription -SubscriptionName $subscriptionName
Select-AzSubscription -SubscriptionObject $subscriptionObject
$subscriptionId = $subscriptionObject.Id

Register-AzResourceProvider -ProviderNamespace Microsoft.Network

# Get previously created vnet and subnet ids
$vnetAzureObject=(Get-AzVirtualNetwork -Name $vnetAzureName -ResourceGroupName $resourceGroupName)
$vnetAzureId=$vnetAzureObject.Id
$subnetAzureInboundId=(Get-AzVirtualNetworkSubnetConfig -Name $subnetAzureDNSInboundName -VirtualNetwork $vnetAzureObject).Id
$subnetAzureOutboundId=(Get-AzVirtualNetworkSubnetConfig -Name $subnetAzureDNSOutboundName -VirtualNetwork $vnetAzureObject).Id

# Create new DNS Resolver
New-AzDnsResolver -Name $dnsResolverName -ResourceGroupName $resourceGroupName -Location $location -VirtualNetworkId $vnetAzureId

# Create DNS Resolver Inbound/Outbound endpoints
$ipconfigInbound = New-AzDnsResolverIPConfigurationObject -PrivateIPAllocationMethod Dynamic -SubnetId $subnetAzureInboundId
New-AzDnsResolverInboundEndpoint -DnsResolverName $dnsResolverName -Name $endpointInboundName -ResourceGroupName $resourceGroupName -Location $location -IpConfiguration $ipconfigInbound
New-AzDnsResolverOutboundEndpoint -DnsResolverName $dnsResolverName -Name $endpointOutboundName -ResourceGroupName $resourceGroupName -Location $location -SubnetId $subnetAzureOutboundId

# Create outbound ruleset
$endpointOutboundObject=(Get-AzDnsResolverOutboundEndpoint -Name $endpointOutboundName -DnsResolverName $dnsResolverName -ResourceGroupName $resourceGroupName)
$dnsOutboundRulesetObject=(New-AzDnsForwardingRuleset -Name $dnsOutboundRulesetName -ResourceGroupName $resourceGroupName -DnsResolverOutboundEndpoint $endpointOutboundObject -Location $location)

# Link DNS forwarding ruleset to azure vnet
$dnsOutboundVnetLink = New-AzDnsForwardingRulesetVirtualNetworkLink -DnsForwardingRulesetName $dnsOutboundRulesetName -ResourceGroupName $resourceGroupName -VirtualNetworkLinkName $dnsOutboundVnetLinkName1 -VirtualNetworkId $vnetAzureId -SubscriptionId $subscriptionObject

# Forwarding Rules
$targetDNS1 = New-AzDnsResolverTargetDnsServerObject -IPAddress 10.0.0.4 -Port 53
$forwardingrule1 = New-AzDnsForwardingRulesetForwardingRule -ResourceGroupName $resourceGroupName -DnsForwardingRulesetName $dnsOutboundRulesetName -Name $dnsOutboundForwardingRule1 -DomainName $AdDomainName -ForwardingRuleState "Enabled" -TargetDnsServer $targetDNS1

# Create Storage Account with private link in Azure VNET (manually since not very straightforward with az cli) 


# build a windows VM in Azure VNET
# (got lazy here and did manually)

# build a domain controller Vm in the on-prem vnet in subnet 1 (got lazy here and did manually)
# Promote to DC

# confirm ping between VMs
# set AD DC forward to DNS resolver inbound endpoint
# set outbound ruleset for AD non-routable domain to AD Domain Server IP Address
# Join domain (ensure azure VM uses azure DNS (the forwarding ruleset will send dns to domain controller))
# confirm azure ad vm can hit private link using forwarder to inbound dns forwarder
